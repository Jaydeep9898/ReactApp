{"version":3,"sources":["student.js","student2.js","App.js","serviceWorker.js","index.js"],"names":["Student","state","persons","facts","handleClick","axios","get","then","res","data","fact","_this","setState","componentDidMount","catch","err","console","log","message","_this2","react_default","a","createElement","src","this","height","width","alt","style","margin","border","onClick","background","color","padding","textAlign","textDecoration","display","font","cursor","fontSize","React","Component","Student2","file","App","backgroundColor","align","fontFamily","fontWeight","student_Student","student2_Student2","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAEMA,6MACJC,MAAQ,CACNC,QAAS,GACTC,MAAO,MAWTC,YAAc,WACZC,IAAMC,IAAI,wCACTC,KAAK,SAAAC,GACJ,IAAML,EAAQK,EAAIC,KAAKC,KACvBC,EAAKC,SAAS,CAAET,UAChBQ,EAAKE,sBAENC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,4NAfRV,IAAMC,IAAN,2CACHC,KAAK,SAAAC,GACJ,IAAMN,EAAUM,EAAIC,KAAKS,QACzBC,EAAKP,SAAS,CAAEV,4IAkBpB,OACIkB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,KAAKvB,MAAMC,QAASuB,OAAO,MAAMC,MAAM,MAAMC,IAAI,cAAcC,MAAO,CAE5EC,OAAQ,OACRC,OAAQ,eAIZV,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CACVC,OAAQ,SAEVT,EAAAC,EAAAC,cAAA,UAAQS,QAASP,KAAKpB,YAAawB,MAAO,CACxCI,WAAY,UACZF,OAAQ,OACRG,MAAO,QACPC,QAAS,YACTC,UAAW,SACXC,eAAgB,OAChBC,QAAS,eACTC,KAAM,OACNT,OAAQ,UACRU,OAAQ,YAVV,YAYEnB,EAAAC,EAAAC,cAAA,KAAGM,MAAO,CACVK,MAAO,QACPO,SAAU,SACRhB,KAAKvB,MAAME,gBAvDAsC,IAAMC,WCAvBC,6MACJ1C,MAAQ,CACNC,QAAS,GACTC,MAAO,MAGTC,YAAc,WACZC,IAAMC,IAAI,6CACTC,KAAK,SAAAC,GACJ,IAAML,EAAQK,EAAIC,KAAKC,KACvBC,EAAKC,SAAS,CAAET,UAChBQ,EAAKE,kBAAkB,OAExBC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,8PAMe,aACvBV,IAAMC,IAAN,+BACHC,KAAK,SAAAC,GACJ,IAAMN,EAAUM,EAAIC,KAAKmC,KACzBzB,EAAKP,SAAS,CAAEV,4IAKpB,OACEkB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,IAAKC,KAAKvB,MAAMC,QAASuB,OAAO,MAAMC,MAAM,MAAMC,IAAI,cAAcC,MAAO,CAE5EC,OAAQ,OACRC,OAAQ,eAIZV,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CACVC,OAAQ,SAEVT,EAAAC,EAAAC,cAAA,UAAQS,QAASP,KAAKpB,YAAawB,MAAO,CACxCI,WAAY,UACZF,OAAQ,OACRG,MAAO,QACPC,QAAS,YACTC,UAAW,SACXC,eAAgB,OAChBC,QAAS,eACTC,KAAM,OACNT,OAAQ,UACRU,OAAQ,YAVV,YAYAnB,EAAAC,EAAAC,cAAA,KAAGM,MAAO,CACRK,MAAO,QACPO,SAAU,SACRhB,KAAKvB,MAAME,gBAxDCsC,IAAMC,WCuBfG,mLAjBX,OACEzB,EAAAC,EAAAC,cAAA,OAAKM,MAAO,CACVkB,gBAAgB,YAElB1B,EAAAC,EAAAC,cAAA,MAAIyB,MAAO,QAAQnB,MAAO,CACxBF,MAAO,MACPsB,WAAW,QACXC,WAAY,OACZpB,OAAQ,oBAJV,oBAMET,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAAC6B,EAAD,cAdUT,aCOEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzD,KAAK,SAAA0D,GACjCA,EAAaC","file":"static/js/main.d3fe2243.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nclass Student  extends React.Component {\n  state = {\n    persons: '',\n    facts: ''\n  }\n\n  async componentDidMount() {\n    await axios.get(`https://dog.ceo/api/breeds/image/random`)\n      .then(res => {\n        const persons = res.data.message;\n        this.setState({ persons });\n      })\n  }\n\n  handleClick = () => {\n    axios.get('https://some-random-api.ml/facts/dog')\n    .then(res => {\n      const facts = res.data.fact;\n      this.setState({ facts });\n      this.componentDidMount();\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n\n  render() {\n    return (\n        <div>\n        <img src={this.state.persons} height='300' width='300' alt='Doggo cutto' style={{\n\n            margin: '20px',\n            border: '5px  blue',\n\n            \n        }}></img>\n        <div style={{\n          margin: '20px',\n        }}>\n        <button onClick={this.handleClick} style={{\n          background: '#4CAF50',\n          border: 'none',\n          color: 'white',\n          padding: '15px 32px',\n          textAlign: 'center',\n          textDecoration: 'none',\n          display: 'inline-block',\n          font: '16px',\n          margin: '4px 2px',\n          cursor: 'pointer',\n        }}>Click Me</button>\n          <p style={{\n          color: 'white',\n          fontSize: '30px'\n        }}>{this.state.facts}</p>\n        </div>\n        </div>\n\n    )\n\n  }\n}\n\n//don't use default as while importing the component we can call it by other names. Where removing the default we \nexport {Student};","import React from 'react';\nimport axios from 'axios';\nclass Student2  extends React.Component {\n  state = {\n    persons: '',\n    facts: '',\n  }\n\n  handleClick = () => {\n    axios.get('https://catfact.ninja/fact?max_length=100')\n    .then(res => {\n      const facts = res.data.fact;\n      this.setState({ facts });\n      this.componentDidMount(500);\n    })\n    .catch(err => {\n      console.log(err);\n    })\n  }\n\n  \n\n  async componentDidMount(code = 200) {\n    await axios.get(`https://aws.random.cat/meow`)\n      .then(res => {\n        const persons = res.data.file;\n        this.setState({ persons });\n      })\n  }\n\n  render() {\n    return (\n      <div>\n        <img src={this.state.persons} height='300' width='300' alt='Doggo cutto' style={{\n\n            margin: '20px',\n            border: '5px  blue',\n\n            \n        }}></img>\n        <div style={{\n          margin: '20px',\n        }}>\n        <button onClick={this.handleClick} style={{\n          background: '#4CAF50',\n          border: 'none',\n          color: 'white',\n          padding: '15px 32px',\n          textAlign: 'center',\n          textDecoration: 'none',\n          display: 'inline-block',\n          font: '16px',\n          margin: '4px 2px',\n          cursor: 'pointer',\n        }}>Click Me</button>\n        <p style={{\n          color: 'white',\n          fontSize: '30px'\n        }}>{this.state.facts}</p>\n        </div>\n        </div>\n    )\n  }\n}\n\n//don't use default as while importing the component we can call it by other names. Where removing the default we \nexport {Student2};","import React, { Component } from 'react';\nimport './App.css';\nimport {Student} from './student';\nimport {Student2} from './student2';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div style={{\n        backgroundColor:'#85C1E9',\n      }}>\n      <h1 align ='right' style={{\n        width: '50%',\n        fontFamily:'arial',\n        fontWeight: 'bold',\n        margin: '0px 0px 1px 0px'\n      }}> Doggo and Kitty</h1>\n        <Student /> \n        <Student2 />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}